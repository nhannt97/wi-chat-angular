!function(n){var e={};function t(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return n[o].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var i in n)t.d(o,i,function(e){return n[e]}.bind(null,i));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="../source/img",t(t.s=2)}([function(n,e){n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=function(n,e){var t=n[1]||"",o=n[3];if(!o)return t;if(e&&"function"==typeof btoa){var i=(a=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),s=o.sources.map((function(n){return"/*# sourceURL="+o.sourceRoot+n+" */"}));return[t].concat(s).concat([i]).join("\n")}var a;return[t].join("\n")}(e,n);return e[2]?"@media "+e[2]+"{"+t+"}":t})).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var o={},i=0;i<this.length;i++){var s=this[i][0];"number"==typeof s&&(o[s]=!0)}for(i=0;i<n.length;i++){var a=n[i];"number"==typeof a[0]&&o[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),e.push(a))}},e}},function(n,e,t){var o,i,s={},a=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=o.apply(this,arguments)),i}),r=function(n){return document.querySelector(n)},c=function(n){var e={};return function(n){if("function"==typeof n)return n();if(void 0===e[n]){var t=r.call(this,n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}}(),l=null,p=0,d=[],u=t(6);function g(n,e){for(var t=0;t<n.length;t++){var o=n[t],i=s[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(w(o.parts[a],e))}else{var r=[];for(a=0;a<o.parts.length;a++)r.push(w(o.parts[a],e));s[o.id]={id:o.id,refs:1,parts:r}}}}function h(n,e){for(var t=[],o={},i=0;i<n.length;i++){var s=n[i],a=e.base?s[0]+e.base:s[0],r={css:s[1],media:s[2],sourceMap:s[3]};o[a]?o[a].parts.push(r):t.push(o[a]={id:a,parts:[r]})}return t}function m(n,e){var t=c(n.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=d[d.length-1];if("top"===n.insertAt)o?o.nextSibling?t.insertBefore(e,o.nextSibling):t.appendChild(e):t.insertBefore(e,t.firstChild),d.push(e);else if("bottom"===n.insertAt)t.appendChild(e);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=c(n.insertInto+" "+n.insertAt.before);t.insertBefore(e,i)}}function f(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var e=d.indexOf(n);e>=0&&d.splice(e,1)}function x(n){var e=document.createElement("style");return n.attrs.type="text/css",v(e,n.attrs),m(n,e),e}function v(n,e){Object.keys(e).forEach((function(t){n.setAttribute(t,e[t])}))}function w(n,e){var t,o,i,s;if(e.transform&&n.css){if(!(s=e.transform(n.css)))return function(){};n.css=s}if(e.singleton){var a=p++;t=l||(l=x(e)),o=k.bind(null,t,a,!1),i=k.bind(null,t,a,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(n){var e=document.createElement("link");return n.attrs.type="text/css",n.attrs.rel="stylesheet",v(e,n.attrs),m(n,e),e}(e),o=U.bind(null,t,e),i=function(){f(t),t.href&&URL.revokeObjectURL(t.href)}):(t=x(e),o=C.bind(null,t),i=function(){f(t)});return o(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;o(n=e)}else i()}}n.exports=function(n,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var t=h(n,e);return g(t,e),function(n){for(var o=[],i=0;i<t.length;i++){var a=t[i];(r=s[a.id]).refs--,o.push(r)}n&&g(h(n,e),e);for(i=0;i<o.length;i++){var r;if(0===(r=o[i]).refs){for(var c=0;c<r.parts.length;c++)r.parts[c]();delete s[r.id]}}}};var b,y=(b=[],function(n,e){return b[n]=e,b.filter(Boolean).join("\n")});function k(n,e,t,o){var i=t?"":o.css;if(n.styleSheet)n.styleSheet.cssText=y(e,i);else{var s=document.createTextNode(i),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(s,a[e]):n.appendChild(s)}}function C(n,e){var t=e.css,o=e.media;if(o&&n.setAttribute("media",o),n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}function U(n,e,t){var o=t.css,i=t.sourceMap,s=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||s)&&(o=u(o)),i&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([o],{type:"text/css"}),r=n.href;n.href=URL.createObjectURL(a),r&&URL.revokeObjectURL(r)}},function(n,e,t){n.exports=t(3)},function(n,e,t){t(4);let o=t(7),i=t(8),s=t(10),a=t(15),r=t(19),c=componentName="wiChat";function l(n,e,t,o){let i=this;this.user=null,this.curConver={},this.listConver=[],this.listUser=[],this.curConverId=-9999;let s,a=t.find(".text-message"),r=t.find(".list-message");function c(){let n=(i.listConver[0]||{}).id;i.curConver={},i.listConver=[],l("Help_Desk-"+i.username,(function(e){e&&(i.user=e.user,i.curConver=e.conver,i.listConver[0]=e.conver,n&&socket.emit("off-project",{username:i.user.username,idConversation:n}),socket.emit("join-room",{username:i.user.username,idConversation:e.conver.id}))})),d()}function l(e,t){n.getConversation(i.token,{name:e},(function(n){n?t&&t(n):t&&t()}))}function p(){n.seenMessage(i.token,{idUser:i.user.id,nameConversation:i.curConver.name},(function(n){n&&o((function(){i.listConver.filter((function(n){return n.id==i.curConver.id}))[0].lastMessFontWeight=""}))}))}function d(){if(i.groupName){let s=i.curConver.id;e=i.groupName,t=i.owner,o=function(n){n&&n.length>=2?l(i.groupName,(function(e){e&&(i.user||(i.user=e.user),i.listUser=n,i.curConver=e.conver,i.listConver[1]=e.conver,socket.emit("off-project",{idConversation:s,username:i.user.username}),socket.emit("join-room",{username:i.user.username,idConversation:e.conver.id}))})):(i.listConver.splice(1,1),i.curConver=i.listConver[0])},n.getListUser(i.token,{project_name:e,owner:t},(function(n){n?o&&o(n):o&&o()}))}var e,t,o}function u(n){const e={regex:/\</g,replaceStr:"&lt"},t={regex:/\>/g,replaceStr:"&gt"};return n=(n=n.replace(t.regex,t.replaceStr)).replace(e.regex,e.replaceStr)}this.$onInit=function(){console.log(i.url,i.getListUser),s=i.url.length,n.BASE_URL=i.url,n.GET_LIST_USER=i.getListUser,socket=io(i.url),socket.on("sendMessage",(function(n){n.username==i.user.username||i.show||(n.idConversation==i.listConver[0].id?__toastr.success("Admin has sent message to Help Desk"):__toastr.success(n.username+" has sent message to "+n.nameConversation+" group")),i.curConver.id==n.idConversation&&(i.curConver.Messages=i.curConver.Messages?i.curConver.Messages:[],o((function(){i.curConver.Messages.push(n),o((function(){r.scrollTop(r[0].scrollHeight)}),500)}))),i.curConver.id==n.idConversation&&$(".text-message").is(":focus")||i.user.username==n.username||o((function(){i.listConver.filter((function(e){return e.id==n.idConversation}))[0].lastMessFontWeight="bolder"}))})),socket.on("send-members-online",(function(n){i.listUser&&o((function(){for(x of n)i.listUser.forEach((function(n){n.username==x&&(n.active="rgb(66, 183, 42)")}))}))})),socket.on("disconnected",(function(n){i.listUser&&o((function(){i.listUser.forEach((function(e){e.username==n&&(e.active="")}))}))})),socket.on("off-project",(function(n){i.listUser&&o((function(){i.listUser.forEach((function(e){e.username==n.username&&(e.active="")}))}))})),i.token&&c()},e.$watch((function(){return i.token}),(function(n,e){n&&n!=e&&c()})),window.list=i.listConver,e.$watch((function(){return i.groupName}),(function(n,e){n&&n!=e?d():n||(i.listConver.splice(1,1),i.curConver=i.listConver[0])})),a.keypress((function(e){if(13==e.which&&!e.shiftKey){let t=a.val();if(t=t.trim(),t){let e={content:u(t),type:"text",idSender:i.user.id,username:i.user.username,nameConversation:i.curConver.name,idConversation:i.curConver.id,User:i.user,sendAt:new Date};n.postMessage(i.token,e,(function(n){}))}e.preventDefault(),a.val("")}})),this.upload=function(e){async.forEachOfSeries(e,(e,t,o)=>{let s=e.type.substring(0,5);n.upload(i.token,{file:e,fields:{name:i.curConver.name,width:130}},e=>{if(e){let t={content:e,type:"image"==s?"image":"file",username:i.user.username,nameConversation:i.curConver.name,idSender:i.user.id,idConversation:i.curConver.id,User:i.user,sendAt:new Date};n.postMessage(i.token,t,n=>{o()})}})},n=>{})},this.changeCurConver=function(n){i.curConverId=n.id,i.curConver.id!=n.id?l(n.name,(function(n){n&&(i.curConver=n.conver,i.curConver.lastMessFontWeight&&p())})):i.curConver.lastMessFontWeight&&p()},this.getImageOrigin=function(n){let e=n.slice(s+1);return i.url+"/api/imageOrigin/"+e+"?token="+i.token},this.download=function(n){let e=n.slice(s+1);return i.url+"/api/download/"+e+"?token="+i.token},this.thumb=function(n){let e=n.slice(s+1);return i.url+"/api/thumb/"+e+"?token="+i.token},this.fileName=function(n){return n.substring(s+35+i.curConver.name.length,n.length)},this.getDate=function(n,e){let t=new Date(n),o=new Date(e);return t.toString().substring(0,15)!=o.toString().substring(0,15)},this.seenMessage=function(){i.curConver.lastMessFontWeight&&p()},e.$watch((function(){return i.curConver}),(function(n,e){n&&o((function(){r.scrollTop(r[0].scrollHeight)}),500)})),e.$watch((function(){return i.show}),(function(n,e){n&&o((function(){r.scrollTop(r[0].scrollHeight)}),500)})),$(".wraper").draggable({start:function(){$(this).css("bottom","auto"),$(this).css("right","auto")},containment:"window",cancel:".content",cursor:"move"})}angular.module(c,[o.name,i.name,s.name,a.name,r.name,"ngFileUpload"]).component(componentName,{template:t(23),controller:l,controllerAs:componentName,bindings:{show:"=",token:"=",username:"=",groupName:"=",owner:"=",url:"<",getListUser:"<"}}),l.$inject=["apiService","$scope","$element","$timeout"]},function(n,e,t){var o=t(5);"string"==typeof o&&(o=[[n.i,o,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};t(1)(o,i);o.locals&&(n.exports=o.locals)},function(n,e,t){(n.exports=t(0)(!1)).push([n.i,"wi-chat .wraper {\n\twidth: 550px;\n\theight: 450px;\n\tz-index: 100;\n\tposition: absolute;\n\tbottom: 0px;\n\tright: 0px;\n}\n\nwi-chat .container, .row {\n\tmargin: 0px;\n\tpadding: 0px;\n}\n\nwi-chat .container {\n\tposition: fixed;\n\twidth: 600px;\n\theight: 450px;\n\tborder: 2px solid #dddddd;\n}\n\nwi-chat .header {\n\theight: 6%;\n\tpadding: 3px 6px;\n\tbackground: linear-gradient(to bottom, #eee, #ddd, #bbb);\n}\n\nwi-chat .content {\n\theight: 94%;\n\tpadding: 0px 6px 6px;\n\tbackground: #ccc;\n}\n\nwi-chat .left, wi-chat .right {\n\tpadding: 0;\n\tmargin: auto;\n\theight: 100%;\n\tbackground: #fff;\n}\n\nwi-chat .left {\n}\n\nwi-chat .right {\n\tborder-left: 6px solid #ccc;\n\toverflow: overlay;\n}\n\nwi-chat .list-message {\n\tborder-bottom: 6px solid #ccc;\n\toverflow: overlay;\n\theight: 93%;\n}\n\nwi-chat .enter-message {\n\theight: 7%;\n}\n\nwi-chat textarea:focus, input:focus {\n\toutline: none;\n}\n\nwi-chat ::-webkit-scrollbar {\n\twidth: 5px;\n}\nwi-chat .conver:hover{\n\tbackground: #ddd;\n\tcursor: pointer;\n}\nwi-chat .dropdown-menu {\n\tleft: auto;\n}\n/* Track */\n\nwi-chat ::-webkit-scrollbar-track {\n\tbox-shadow: inset 0 0 1px rgb(202, 202, 202);\n\tborder-radius: 2px;\n}\n\n/* Handle */\n\nwi-chat ::-webkit-scrollbar-thumb {\n\tbackground: rgb(207, 207, 207);\n\tborder-radius: 10px;\n}\n\nwi-chat .tab-chosen {\n\tbackground: #ddd;\n}",""])},function(n,e){n.exports=function(n){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var t=e.protocol+"//"+e.host,o=t+e.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(n,e){var i,s=e.trim().replace(/^"(.*)"$/,(function(n,e){return e})).replace(/^'(.*)'$/,(function(n,e){return e}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(s)?n:(i=0===s.indexOf("//")?s:0===s.indexOf("/")?t+s:o+s.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")}))}},function(n,e){angular.module("apiServiceModule",[]).service("apiService",["$http","Upload",function(n,e){let t=this;function o(e,o,i,s){n({method:"POST",url:e==t.GET_LIST_USER?e:t.BASE_URL+e,headers:{Authorization:o},data:i}).then((function(n){200!=n.data.code?(console.error(n.data.reason),s()):s(n.data.content)}),(function(n){console.error(n),__toastr&&__toastr.error(n),s()}))}return this.getListUser=function(n,e,i){o(t.GET_LIST_USER,n,e,i)},this.getListConversationOfUser=function(n,e,t){o("/api/conversation/list",n,e,t)},this.getConversation=function(n,e,t){o("/api/conversation",n,e,t)},this.leaveConversation=function(n,e,t){o("/api/conversation/leave",n,e,t)},this.postMessage=function(n,e,t){o("/api/message/new",n,e,t)},this.seenMessage=function(n,e,t){o("/api/message/seen",n,e,t)},this.addUserToConversation=function(n,e,t){o("/api/conversation/user/add",n,e,t)},this.upload=(n,o,i)=>{e.upload({url:t.BASE_URL+"/api/upload",headers:{Authorization:n},file:o.file,fields:o.fields}).then(n=>{200!=n.data.code?(console.error(n.data.reason),i()):i(n.data.content)},n=>{console.error(n),n.config.file.size>52428800&&__toastr.error("Size of upload file must be less than 50MB"),i()})},this}]),n.exports.name="apiServiceModule"},function(n,e,t){let o=componentName="avatar";angular.module(o,[]).component(componentName,{template:t(9),controller:function(){let n=this;this.name=function(){return n.username.substring(0,1).toUpperCase()},this.getColor=function(){if(n.color)return n.color;for(var e=n.username,t=0,o=0;o<e.length;o++)t=e.charCodeAt(o)+((t<<5)-t);var i="#";for(o=0;o<3;o++){i+=("00"+(t>>8*o&255).toString(16)).substr(-2)}return i}},controllerAs:componentName,bindings:{username:"<",size:"<",color:"<"}}),e.name=o},function(n,e){n.exports='<style>\n    .circle {\n        position: relative;\n        border-radius: 100px;\n        display: table;\n        width: 30px;\n        height: 30px;\n    }\n    .name {\n        position: absolute;\n        transform: translate(-50%, -50%);\n        top: 50%;\n        left: 50%;\n        font-size: 150%;\n        color: #fff;\n    }\n</style>\n<div class="circle" style="background: {{avatar.getColor()}}">\n    <b class="name">{{avatar.name()}}</b>\n</div>\n'},function(n,e,t){const o=t(11);function i(){let n=this;const e=Object.entries(o),t=function(){const n=e.reduce((n,e)=>{return[...n,...e[1]["text-replace"]]},[]),t=n.reduce((e,t,o)=>{const s=i(t);if(0===o)return e+s;let a=`${e}|${s}`;return o===n.length-1&&(a+=")"),a},"(");return new RegExp(t,"g")}();function i(n){return n.split("").reduce((n,e)=>`${n}\\${e}`,"")}function s(n){const t=e.filter(e=>{return!!e[1]["text-replace"].filter(e=>e===n).length})[0];return t?t[1].icon:null}n.$onInit=function(){n.text=function(n){const e=n.match(t);if(!e||!e.length)return n;const o=e.filter((n,t)=>e.indexOf(n)===t);let a=n;for(let n of o){const e=new RegExp(i(n)),t=s(n),o=`<div class="${t}"></div>`;t&&(a=a.replace(e,o))}return a}(n.text)}}t(12),i.$inject=[],angular.module("chat-message",[]).component("chatMessage",{template:t(14),controller:i,controllerAs:"chatMessage",bindings:{text:"<",color:"<"}}),e.name="chat-message"},function(n){n.exports=JSON.parse('{"angry-1":{"icon":"angry-1-icon","text-replace":[":@"]},"angry":{"icon":"angry-icon","text-replace":[":-@"]},"bored-1":{"icon":"bored-1-icon","text-replace":[":|"]},"bored-2":{"icon":"bored-2-icon","text-replace":["|-)"]},"bored":{"icon":"bored-icon","text-replace":[":-|"]},"confused-1":{"icon":"confused-1-icon","text-replace":[":?"]},"confused":{"icon":"confused-icon","text-replace":[":-?"]},"crying-1":{"icon":"crying-1-icon","text-replace":[":\'("]},"crying":{"icon":"crying-icon","text-replace":[":("]},"embarrassed":{"icon":"embarrassed-icon","text-replace":[]},"emoticons":{"icon":"emoticons-icon","text-replace":[]},"happy-1":{"icon":"happy-1-icon","text-replace":[]},"happy-2":{"icon":"happy-2-icon","text-replace":[]},"happy-3":{"icon":"happy-3-icon","text-replace":[]},"happy-4":{"icon":"happy-4-icon","text-replace":[]},"happy":{"icon":"happy-icon","text-replace":[]},"ill":{"icon":"ill-icon","text-replace":[]},"in-love":{"icon":"in-love-icon","text-replace":[]},"kissing":{"icon":"kissing-icon","text-replace":[":*"]},"mad":{"icon":"mad-icon","text-replace":[]},"nerd":{"icon":"nerd-icon","text-replace":[]},"ninja":{"icon":"ninja-icon","text-replace":[]},"quiet":{"icon":"quiet-icon","text-replace":[]},"sad":{"icon":"sad-icon","text-replace":[")-)"]},"secret":{"icon":"secret-icon","text-replace":[]},"smart":{"icon":"smart-icon","text-replace":["8-)"]},"smile":{"icon":"smile-icon","text-replace":[":))",":)"]},"smiling":{"icon":"smiling-icon","text-replace":[":-)"]},"surprised-1":{"icon":"surprised-1-icon","text-replace":[":-o"]},"surprised":{"icon":"surprised-icon","text-replace":[":o"]},"suspicious-1":{"icon":"suspicious-1-icon","text-replace":[":-/"]},"suspicious":{"icon":"suspicious-icon","text-replace":[]},"tongue-out-1":{"icon":"tongue-out-1-icon","text-replace":[":-P"]},"tongue-out":{"icon":"tongue-out-icon","text-replace":[":P"]},"unhappy":{"icon":"unhappy-icon","text-replace":[":(("]},"wink":{"icon":"wink-icon","text-replace":[";)"]}}')},function(n,e,t){var o=t(13);"string"==typeof o&&(o=[[n.i,o,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};t(1)(o,i);o.locals&&(n.exports=o.locals)},function(n,e,t){(n.exports=t(0)(!1)).push([n.i,".chat-message .angry-1-icon,\n.chat-message .angry-icon,\n.chat-message .bored-1-icon,\n.chat-message .bored-2-icon,\n.chat-message .bored-icon,\n.chat-message .confused-1-icon,\n.chat-message .confused-icon,\n.chat-message .crying-1-icon,\n.chat-message .crying-icon,\n.chat-message .embarrassed-icon,\n.chat-message .emoticons-icon,\n.chat-message .happy-1-icon,\n.chat-message .happy-2-icon,\n.chat-message .happy-3-icon,\n.chat-message .happy-4-icon,\n.chat-message .happy-icon,\n.chat-message .ill-icon,\n.chat-message .in-love-icon,\n.chat-message .kissing-icon,\n.chat-message .mad-icon,\n.chat-message .nerd-icon,\n.chat-message .ninja-icon,\n.chat-message .quiet-icon,\n.chat-message .sad-icon,\n.chat-message .secret-icon,\n.chat-message .smart-icon,\n.chat-message .smile-icon,\n.chat-message .smiling-icon,\n.chat-message .surprised-1-icon,\n.chat-message .surprised-icon,\n.chat-message .suspicious-1-icon,\n.chat-message .suspicious-icon,\n.chat-message .tongue-out-1-icon,\n.chat-message .tongue-out-icon,\n.chat-message .unhappy-icon,\n.chat-message .wink-icon\n{ display: inline-block; background: url('/../../img/png.png') no-repeat; overflow: hidden; text-indent: -9999px; text-align: left; }\n\n.chat-message .angry-1-icon { background-position: -0px -0px; width: 16px; height: 16px; }\n.chat-message .angry-icon { background-position: -16px -0px; width: 16px; height: 16px; }\n.chat-message .bored-1-icon { background-position: -32px -0px; width: 16px; height: 16px; }\n.chat-message .bored-2-icon { background-position: -48px -0px; width: 16px; height: 16px; }\n.chat-message .bored-icon { background-position: -64px -0px; width: 16px; height: 16px; }\n.chat-message .confused-1-icon { background-position: -80px -0px; width: 16px; height: 16px; }\n.chat-message .confused-icon { background-position: -0px -16px; width: 16px; height: 16px; }\n.chat-message .crying-1-icon { background-position: -16px -16px; width: 16px; height: 16px; }\n.chat-message .crying-icon { background-position: -32px -16px; width: 16px; height: 16px; }\n.chat-message .embarrassed-icon { background-position: -48px -16px; width: 16px; height: 16px; }\n.chat-message .emoticons-icon { background-position: -64px -16px; width: 16px; height: 16px; }\n.chat-message .happy-1-icon { background-position: -80px -16px; width: 16px; height: 16px; }\n.chat-message .happy-2-icon { background-position: -0px -32px; width: 16px; height: 16px; }\n.chat-message .happy-3-icon { background-position: -16px -32px; width: 16px; height: 16px; }\n.chat-message .happy-4-icon { background-position: -32px -32px; width: 16px; height: 16px; }\n.chat-message .happy-icon { background-position: -48px -32px; width: 16px; height: 16px; }\n.chat-message .ill-icon { background-position: -64px -32px; width: 16px; height: 16px; }\n.chat-message .in-love-icon { background-position: -80px -32px; width: 16px; height: 16px; }\n.chat-message .kissing-icon { background-position: -0px -48px; width: 16px; height: 16px; }\n.chat-message .mad-icon { background-position: -16px -48px; width: 16px; height: 16px; }\n.chat-message .nerd-icon { background-position: -32px -48px; width: 16px; height: 16px; }\n.chat-message .ninja-icon { background-position: -48px -48px; width: 16px; height: 16px; }\n.chat-message .quiet-icon { background-position: -64px -48px; width: 16px; height: 16px; }\n.chat-message .sad-icon { background-position: -80px -48px; width: 16px; height: 16px; }\n.chat-message .secret-icon { background-position: -0px -64px; width: 16px; height: 16px; }\n.chat-message .smart-icon { background-position: -16px -64px; width: 16px; height: 16px; }\n.chat-message .smile-icon { background-position: -32px -64px; width: 16px; height: 16px; }\n.chat-message .smiling-icon { background-position: -48px -64px; width: 16px; height: 16px; }\n.chat-message .surprised-1-icon { background-position: -64px -64px; width: 16px; height: 16px; }\n.chat-message .surprised-icon { background-position: -80px -64px; width: 16px; height: 16px; }\n.chat-message .suspicious-1-icon { background-position: -0px -80px; width: 16px; height: 16px; }\n.chat-message .suspicious-icon { background-position: -16px -80px; width: 16px; height: 16px; }\n.chat-message .tongue-out-1-icon { background-position: -32px -80px; width: 16px; height: 16px; }\n.chat-message .tongue-out-icon { background-position: -48px -80px; width: 16px; height: 16px; }\n.chat-message .unhappy-icon { background-position: -64px -80px; width: 16px; height: 16px; }\n.chat-message .wink-icon { background-position: -80px -80px; width: 16px; height: 16px; }\n.chat-message .unselectable { -moz-user-select: -moz-none; -khtml-user-select: none; -webkit-user-select: none; -o-user-select: none; user-select: none; }",""])},function(n,e){n.exports='<div class="chat-message">\n    \x3c!-- <div class="ninja-icon"></div> --\x3e\n    <div unselectable="on" class="unselectable" style="color: {{chatMessage.color}}; word-wrap: break-word;white-space: pre-line" ng-bind-html="chatMessage.text"></div>\n</div>\n'},function(n,e,t){t(16),angular.module("img-preview",[]).component("imgPreview",{template:t(18),controller:function(){let n=this;function e(e,t=n.smallImgLink){return`__${Date.now().toString()}-${t}-${e}__`}n.$onInit=function(){n._modal=e("modal"),n._modalImg=e("modal-img"),n._zoomBackground=e("zoom-background")},n.imgOnclick=function(){document.getElementById(n._modal).style.display="block",n.zoomer||(n.zoomer=function(){const e=document.getElementById(n._zoomBackground),t=document.getElementById(n._modalImg),o=90;let i=1;function s(){e.onmousemove=null,e.onmouseout=null}function a(){t.style.opacity=0}return e.style.backgroundImage=`url('${n.fullImgLink}')`,console.log({"self.fullIMGLinkd":n.fullImgLink}),{enableZoom:function(){e.onmousemove=function(n){const e=n.currentTarget;let t,o,i,s;a(),t=n.offsetX?n.offsetX:n.touches[0].pageX,n.offsetY?o=n.offsetY:t=n.touches[0].pageX,i=t/e.offsetWidth*100,s=o/e.offsetHeight*100,e.style.backgroundPosition=i+"% "+s+"%"},e.onmouseout=function(n){t.style.opacity=1}},disableZoom:function(){t.style.opacity=1,s()},zoomIn:function(){a(),i<=9&&++i;const n=i+o;e.style.backgroundSize=n,s()},zoomOut:function(){a(),i>=1&&--i;const n=i+o;e.style.backgroundSize=n,s()},isZoomHoverEnable:function(){return!!e.onmousemove}}}())},n.closeOnClick=function(){document.getElementById(n._modal).style.display="none"},n.zoomByMouseToggle=function(){console.log({"self.zoomer.isZoomHoverEnable":n.zoomer.isZoomHoverEnable()}),n.zoomer.isZoomHoverEnable()?n.zoomer.disableZoom():n.zoomer.enableZoom()}},controllerAs:"imgPreview",bindings:{smallImgLink:"<",downloadLink:"<",fullImgLink:"<"}}),e.name="img-preview"},function(n,e,t){var o=t(17);"string"==typeof o&&(o=[[n.i,o,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};t(1)(o,i);o.locals&&(n.exports=o.locals)},function(n,e,t){(n.exports=t(0)(!1)).push([n.i,"/* .main-img {\n    border-radius: 5px;\n    cursor: pointer;\n    transition: 0.3s;\n} */\n\n.img-preview .main-img{\n    border-radius: 5px;\n    cursor: pointer;\n    transition: 0.3s;\n    max-width: 70%;\n    max-height: 40%;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n}\n\n.img-preview .main-img:hover {opacity: 0.7;}\n\n/* The Modal (background) */\n.img-preview .modal {\n    display: none; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 1; /* Sit on top */\n    padding-top: 100px; /* Location of the box */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.9); /* Black w/ opacity */\n    z-index: 1000;\n}\n\n/* Modal Content (image) */\n.img-preview .modal-content {\n    margin: auto;\n    display: block;\n    width: 90%;\n    max-width: 900px;\n    border: 0px;\n}\n\n/* Caption of Modal Image */\n/* #caption {\n    margin: auto;\n    display: block;\n    width: 80%;\n    max-width: 700px;\n    text-align: center;\n    color: #ccc;\n    padding: 10px 0;\n    height: 150px;\n} */\n\n/* Add Animation */\n.img-preview .modal-content /*, #caption */ {    \n    -webkit-animation-name: zoom;\n    -webkit-animation-duration: 0.6s;\n    animation-name: zoom;\n    animation-duration: 0.6s;\n}\n\n/* @-webkit-keyframes zoom {\n    from {-webkit-transform:scale(0)} \n    to {-webkit-transform:scale(1)}\n}\n\n@keyframes zoom {\n    from {transform:scale(0)} \n    to {transform:scale(1)}\n} */\n\n/* The Close Button */\n.img-preview .close {\n    position: absolute;\n    top: 15px;\n    right: 35px;\n    color: #f1f1f1;\n    /* color: #bbb; */\n    font-size: 40px;\n    font-weight: bold;\n    transition: 0.3s;\n    cursor: pointer;\n    opacity: 1;\n}\n\n\n.img-preview .close:hover,\n.img-preview .close:focus {\n    color: #bbb;\n    text-decoration: none;\n    cursor: pointer;\n}\n\n/* download btn */\n/* \n.download {\n    position: absolute;\n    top: 15px;\n    right: 35px;\n    color: #f1f1f1;\n    font-size: 40px;\n    font-weight: bold;\n    transition: 0.3s;\n}\n\n.download:hover,\n.download:focus {\n    color: #bbb;\n    text-decoration: none;\n    cursor: pointer;\n} */\n\n/* 100% Image Width on Smaller Screens */\n@media only screen and (max-width: 700px){\n    .img-preview .modal-content {\n        width: 100%;\n    }\n}\n\n/* zoom */\n\n.img-preview figure.zoom {\n    margin: auto;\n    background-position: 50% 50%;\n    background-repeat: no-repeat;\n    position: relative;\n    /* width: 500px; */\n    overflow: hidden;\n    cursor: zoom-in;\n    width:90%;\n    max-width: 900px;\n\n    /* slide effect */\n    /* background-repeat: repeat; */\n    /* animation: slide linear 60ms; */\n\n}\n\n/* .img-preview figure.zoom img:hover {\n    opacity: 0;\n} */\n\n.img-preview figure.zoom img {\n    transition: opacity 0.5s;\n    display: block;\n    width: 100%;\n}\n\n@keyframes slide{\n    0%{\n        transform: translate3d(0, 0, 0);\n      }\n      100%{\n        transform: translate3d(-1692px, 0, 0);\n      }\n}",""])},function(n,e){n.exports='\x3c!-- <img class="main-img" src="{{imgPreview.source}}" alt="image" style="width:100%;max-width:300px">\n\n\n<div class="modal">\n  <span class="close">&times;</span>\n  <img class="modal-content">\n\n</div> --\x3e\n\n\x3c!-- <img\n class="main-img"\n id="{{imgPreview._img}}"\n src="{{imgPreview.source}}"\n alt="failed to load image"\n style="width:100%;max-width:300px"\n ng-click="imgPreview.imgOnclick()"> --\x3e\n<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">\n\n\n<div class="img-preview">\n    <img class="main-img" ng-src="{{imgPreview.smallImgLink}}" alt="failed to load image" style="width:100%;max-width:300px;z-index: 1002;"\n        ng-click="imgPreview.imgOnclick()">\n\n    \x3c!-- The Modal --\x3e\n    <div id="{{imgPreview._modal}}" class="modal">\n        <span class="close" ng-click="imgPreview.closeOnClick()">&times;</span>\n        <span class="close" style="right: 70px" ng-click="imgPreview.downloadOnClick()">\n            \x3c!-- <i style="font-size: 31px" class="material-icons large">cloud_download</i> --\x3e\n            <a href="{{imgPreview.downloadLink}}">\n                <i style="font-size: 31px; color: #f1f1f1" class="material-icons large">cloud_download</i>\n            </a>\n        </span>\n\n        <span class="close" style="right: 109px" ng-click="imgPreview.zoomByMouseToggle()">\n            \x3c!-- <i style="font-size: 31px" class="material-icons large">cloud_download</i> --\x3e\n            <a style="cursor: pointer;">\n                <i style="font-size: 31px; color: #f1f1f1" class="material-icons large">search</i>\n            </a>\n        </span>\n        <figure class="zoom" id="{{imgPreview._zoomBackground}}">\n            <img ng-src="{{imgPreview.fullImgLink}}" class="modal-content" id="{{imgPreview._modalImg}}">\n        </figure>\n    </div>\n</div>\n\n\x3c!-- <chat-message text="\':)) malie dsocj:-)\'"></chat-message> --\x3e\n'},function(n,e,t){function o(n,e){let t=this,o=window.socket;t.$onInit=function(){t.isOnline=!1,o.on("connect",(function(){t.isOnline=!0})),o.on("disconnect",(function(){t.isOnline=!1})),n.addEventListener("offline",(function(){t.isOnline=!1,e.$digest()}))},t.reconnect=function(){o.connect()}}t(20),o.$inject=["$window","$scope"],angular.module("socket-status",[]).component("socketStatus",{template:t(22),controller:o,controllerAs:"socketStatus",bindings:{}}),e.name="socket-status"},function(n,e,t){var o=t(21);"string"==typeof o&&(o=[[n.i,o,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};t(1)(o,i);o.locals&&(n.exports=o.locals)},function(n,e,t){(n.exports=t(0)(!1)).push([n.i,".dot {\n    height: 12px;\n    width: 12px;\n    border-radius: 50%;\n    display: inline-block;\n    margin-left: 5px;\n}\n\n.online {\n    background-color: green;\n}\n\n.offline {\n    background-color: red;\n}\n\n.refresh {\n    color: #222;\n    cursor: pointer;\n}",""])},function(n,e){n.exports='<i ng-class="socketStatus.isOnline ? \'dot online\' : \'dot offline\'"></i>\n\n\x3c!-- <i ng-if="!socketStatus.isOnline" ng-class="dot offline"></i> --\x3e\n\n<i \n ng-if="!socketStatus.isOnline"\n class="fa fa-refresh refresh"\n title="reconnect socket"\n aria-hidden="true" \n ng-click="socketStatus.reconnect()">\n</i>\n\n\x3c!-- <h1>aklsdjflasdlfj</h1> --\x3e'},function(n,e){n.exports='<div ng-show="wiChat.show" class="wraper container">\n    <div class="row header" style="font-size: 16px; position: relative;">\n        <p style="width: 80%; overflow-x: hidden; text-overflow: ellipsis; display: inline-block;">Conversation({{wiChat.curConver.name}})<socket-status></socket-status></p>\n        <span ng-click="wiChat.show=false" style="float: right; cursor: pointer;" class="fa fa-close"></span>\n    </div>\n    <div class="row content">\n        <div class="col-sm-8 left" style="position: relative;">\n            <div class="row list-message" style="padding: 5px 10px; overflow-y: overlay" ngf-drop="wiChat.upload($files)" class="drop-box"\n                ngf-drag-over-class="\'dragover\'" ngf-multiple="true">\n                <div class="row" ng-repeat="message in wiChat.curConver.Messages track by $index">\n                    <div ng-if="$index==0 || chatGroup.getDate(message.sendAt, chatGroup.conver.Messages[$index-1].sendAt)" class="row" style="text-align: center; color: #acacac; font-weight: bold"\n                        id="message.id">\n                        {{message.sendAt | date: \'EEE dd/MM/y HH:mm a\'}}\n                    </div>\n                    <div ng-if="message.User.username!=wiChat.user.username && ($index==0 || message.User.username!= wiChat.curConver.Messages[$index-1].User.username)"\n                        class="row" style="color: gray; text-align: left; width: 70%">\n                        <div class="col-sm-2" style="padding: 0px">\n                            <div style="display: table; width: 35px; height: 35px; border: 1px solid balck;">\n                            </div>\n                        </div>\n                        <div class="col-sm-10" style="padding: 0px">\n                            <p ng-if="wiChat.curConver.name.indexOf(\'Help_Desk\')==-1" style="color:#b6b6b6; margin-top: 3px; margin-bottom: 3px">{{message.User.username}}</p>\n                            <p ng-if="wiChat.curConver.name.indexOf(\'Help_Desk\')!=-1" style="color:#b6b6b6; margin-top: 3px; margin-bottom: 3px">Admin</p>\n                        </div>\n                    </div>\n                    <div ng-if="message.User.username!=wiChat.user.username" style="width: 70%; float: left;margin-bottom: 2px">\n                        <div class="col-sm-2" style="padding: 0px">\n                            <avatar username="message.User.username" color="\'\'" ng-show="$index==wiChat.curConver.Messages.length || message.User.username!= wiChat.curConver.Messages[$index+1].User.username"></avatar>\n                            <div ng-show="!($index==wiChat.curConver.Messages.length || message.User.username!= wiChat.curConver.Messages[$index+1].User.username)"\n                                style="display: table; width: 35px; height: 35px; border: 1px solid balck;">\n                            </div>\n                        </div>\n                        <div class="col-sm-10" style="padding: 0">\n                            <div data-toggle="tooltip" data-placement="left" title="{{message.sendAt | date: \'H:mm a\'}}" ng-if="message.type!=\'image\'"\n                                style="background: #e6e6e6; border-radius: 5px; display: inline-block; padding: 6px 8px ;max-width: 100%;font-size: 15px">\n                                <p class="message" style=" display: inline;" ng-if="message.type==\'text\'">\n                                    <chat-message text="message.content" color="\'black\'"></chat-message>\n                                </p>\n                                <p class="message" style=" display: inline;" ng-if="message.type==\'file\'">\n                                    <a href="{{wiChat.download(message.content)}}">\n                                        <i class="glyphicon glyphicon-circle-arrow-down"></i>\n                                        {{wiChat.fileName(message.content)}}\n                                    </a>\n                                </p>\n                            </div>\n                            <div data-toggle="tooltip" data-placement="left" title="{{message.sendAt | date: \'H:mm a\'}}" ng-if="message.type==\'image\'"\n                                style=" display: inline-block;max-width: 100%">\n                                <p class="message" style=" display: inline;">\n                                    <img-preview small-img-link="wiChat.thumb(message.content)" download-link="wiChat.download(message.content)" full-img-link="wiChat.getImageOrigin(message.content)">\n                                    </img-preview>\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                    <div ng-if="message.User.username==wiChat.user.username" style="width: 70%; float: right;margin-bottom: 2px">\n                        <div data-toggle="tooltip" data-placement="right" title="{{message.sendAt | date: \'H:mm a\'}}" ng-if="message.type!=\'image\'"\n                            style="background: #4B86C6; border-radius: 5px; float: right; display: inline-block;padding: 6px 8px;max-width: 100%; font-size:15px">\n                            <p class="message" style=" display: inline;" ng-if="message.type==\'text\'">\n                                <chat-message text="message.content" color="\'#fff\'"></chat-message>\n                            </p>\n                            <p class="message" style=" display: inline;" ng-if="message.type==\'file\'">\n                                <a href="{{wiChat.download(message.content)}}" style="color: #fff">\n                                    <i class="glyphicon glyphicon-circle-arrow-down"></i>\n                                    {{wiChat.fileName(message.content)}}\n                                </a>\n                            </p>\n                        </div>\n                        <div data-toggle="tooltip" data-placement="left" title="{{message.sendAt | date: \'H:mm a\'}}" ng-if="message.type==\'image\'"\n                            style=" text-align: right; float: right; display: inline-block;padding: 6px 8px;max-width: 100%">\n                            <p class="message" style=" display: inline;">\n                                <img-preview small-img-link="wiChat.thumb(message.content)" download-link="wiChat.download(message.content)" full-img-link="wiChat.getImageOrigin(message.content)">\n                                </img-preview>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class="row input-group enter-message" ng-click="wiChat.seenMessage()">\n                <textarea class="text-message" rows="1" id="wi-chat-submit" style="border: none; width: 100%; height: 100%;resize: none;position: relative; padding: 5px 5px 4px 10px;"\n                    placeholder="Enter your message ..."></textarea>\n                <span class="input-group-addon" style="background: none; height:100%; border: none; cursor: pointer;padding: 0px 5px">\n                    <i style="font-size: 30px; font-family: none;color: gray" class="glyphicon glyphicon-plus" ngf-select="wiChat.upload($files)"\n                        multiple="multiple"></i>\n                </span>\n            </div>\n        </div>\n        <div class="col-sm-4 right" ng-init="wiChat.showContacts=true;wiChat.showGroups=true;wiChat.showHelpDesk=true;" style="position: relative;">\n            <div class="row" style="height: 93%;overflow-y: overlay; overflow-x: hidden">\n                <div class="help" style="margin-bottom: 10px;padding: 5px;">\n                    <div class="row" style="font-weight: 600; color: #4a4a4a">\n                        HELP\n                    </div>\n                    <div class="listGroup row">\n                        <div ng-repeat="conver in wiChat.listConver | filter:{name: (\'Help_Desk-\' + wiChat.user.username)} " ng-click="wiChat.changeCurConver(conver)"\n                            class="row conver" style="position: relative;margin-top: 5px" ng-class="conver.id === wiChat.curConverId ? \'tab-chosen\' : \'\'">\n                            <div style="width: 20%;padding: 0px">\n                                <avatar username="\'?\'" color="\'red\'"></avatar>\n                            </div>\n                            <div style="width: 80%;padding: 0px;padding-right: 10px; position: absolute; transform: translateY(-50%); top: 50%; margin-left: 40px">\n                                <p style="text-overflow: ellipsis; display: inline-block; width: 70%; overflow-x: hidden; margin-bottom: 0px; white-space:nowrap; font-weight: {{conver.lastMessFontWeight}}">Help desk</p>\n                                <span ng-if="conver.lasMessFontWeight" class="badge badge-danger" style="background: red;float: right; font-size: 10px">New</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class="groups" ng-show="wiChat.listConver.length>1" style="margin-bottom: 10px;padding: 5px;">\n                    <div class="row" style="font-weight: 600; color: #4a4a4a">\n                        CHAT GROUP\n                    </div>\n                    <div  class="listGroup row">\n                        <div ng-repeat="conver in wiChat.listConver | filter:{name: wiChat.groupName}" ng-if="conver.name==wiChat.groupName" ng-click="wiChat.changeCurConver(conver)"\n                            class="row conver" style="position: relative;margin-top: 5px" ng-class="conver.id === wiChat.curConverId ? \'tab-chosen\' : \'\'">\n                            <div style="width: 20%;padding: 0px">\n                                <avatar username="\'G\'" color="\'steelblue\'"></avatar>\n                            </div>\n                            <div style="width: 80%;padding: 0px;padding-right: 10px; position: absolute; transform: translateY(-50%); top: 50%; margin-left: 40px">\n                                <p style="text-overflow: ellipsis; display: inline-block; width: 70%; overflow-x: hidden; margin-bottom: 0px; white-space:nowrap; font-weight: {{conver.lastMessFontWeight}}">{{conver.name}}</p>\n                                <span ng-if="conver.lastMessFontWeight" class="badge badge-danger" style="background: red;float: right; font-size: 10px">New</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class="contacts" ng-show="wiChat.listConver.length>1" style="margin-bottom: 10px; padding: 5px;">\n                    <div class="row" style="font-weight: 600; color: #4a4a4a">\n                        CONTACTS OF GROUP\n                        <span ng-show="wiChat.showContacts" ng-click="wiChat.showContacts=!wiChat.showContacts;" class="fa fa-chevron-up" style="float: right;cursor: pointer;"></span>\n                        <span ng-show="!wiChat.showContacts" ng-click="wiChat.showContacts=!wiChat.showContacts;" class="fa fa-chevron-down" style="float: right;cursor: pointer;"></span>\n                    </div>\n                    <div ng-show="wiChat.showContacts" class="listContact row">\n                        <div ng-repeat="user in wiChat.listUser | filter: wiChat.search | orderBy: \'active\'"\n                            ng-show="user.username != wiChat.user.username"\n                            class="row" style="position: relative;margin-top: 5px">\n                            <div style="width: 20%;padding: 0px">\n                                <avatar username="user.username" color="\'\'"></avatar>\n                            </div>\n                            <div style="width: 80%;padding: 0px;padding-right: 10px; position: absolute; transform: translateY(-50%); top: 50%; margin-left: 40px">\n                                <p style="text-overflow: ellipsis; display: inline-block; width: 80%; overflow-x: hidden; margin-bottom: 0px; white-space:nowrap;">{{user.username}}</p>\n                                <span class="fa fa-circle" style="color: {{user.active}}; float: right; font-size: 10px"></span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class="row earch" style="position: absolute; height: 7%; bottom: 0px;width: 100%;">\n                <input type="text" placeholder="Search ..." style="height: 100%;width: 100%; padding-left: 5px" ng-model="wiChat.search">\n            </div>\n        </div>\n    </div>\n</div>\n<script>\n    // var BASE_URL = \'http://chat.dev.i2g.cloud\';\n    var socket;\n\n    //prevent drop submit\n    var $submit = document.getElementById(\'wi-chat-submit\')\n\n    $submit.addEventListener(\'dragover\', function(e) {\n        e.preventDefault()\n    })\n\n    $submit.addEventListener(\'drop\', function(e) {\n        e.preventDefault()\n    })\n<\/script>\n'}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,